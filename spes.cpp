#include <iostream>
#include <utility>
#include <algorithm> 
#include <cctype>
#include <locale>
#include <vector>

bool verLetMay(int code);

bool verLetMin(int code);

bool verRes(std::string lexema);

bool verNum(int code);

void analizar(const std::string &cadena);

void analizargram(const std::string &cadena);

int relaciona(int ascii);

int relacionarsin(int sts);

int tokens(int token, std::string lexema);

int errores(int error, std::string lexema);

std::string verificar(int sts);

static inline void ltrim(std::string &s);

static inline void rtrim(std::string &s);

static inline std::string &trim_c(std::string &s);

void llenarPila(int row);

int st, st2, columna, estado, stpr, pc;
std::vector<int> pila;
std::vector<int> pilats;
std::vector<std::string> tipo;
std::vector<std::string> cadenasin;
std::string lexema = "", tlexema = "", gram = "";
std::string PalabrasReservadas[] = {"class", "endclass", "int", "float",
                                    "char", "string", "bool", "if", "else", "elseif", "endif", "do", "eval",
                                    "enddo", "while", "endwhile", "read", "write", "def", "as", "for", "endfor",
                                    "private", "public", "protected", "library", "func", "endfunc", "main", "endmain",
                                    "true", "false","endlocal", "void"};
int matriz[46][32] = {
//           L    l    d    .    ,    /    _    -    '    *    +    %    >    <    "    E    e    (    )    [    ]    &    |    =    !    ;    #    \n   \t   \b   ' '   dif
/* q0 */    {2,   1,   3,   23,  124, 24,  506, 21,  15,  22,  20,  25,  11,  10,  17,  2,   1,   119, 120, 121, 122, 13,  14,  9,   12,  123, 19,  0,   0,   0,   0,   506},
/* q1 */    {2,   1,   2,   100, 100, 100, 2,   100, 100, 100, 100, 100, 100, 100, 100, 2,   1,   100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
/* q2 */    {2,   2,   2,   101, 101, 101, 2,   101, 101, 101, 101, 101, 101, 101, 101, 2,   2,   101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 506},
/* q3 */    {102, 102, 3,   4,   102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
/* q4 */    {500, 500, 5,   500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500},
/* q5 */    {103, 103, 5,   103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 6,   6,   103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
/* q6 */    {501, 501, 8,   501, 501, 501, 501, 7,   501, 501, 7,   501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501},
/* q7 */    {502, 502, 8,   502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502},
/* q8 */    {104, 104, 8,   104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
/* q9 */    {109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 36,  109, 109, 109, 109, 109, 109, 109, 109},
/* q10*/    {111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 37,  111, 111, 111, 111, 111, 111, 111, 111},
/* q11*/    {113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 38,  113, 113, 113, 113, 113, 113, 113, 113},
/* q12*/    {116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 39,  116, 116, 116, 116, 116, 116, 116, 116},
/* q13*/    {503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 32,  503, 503, 503, 503, 503, 503, 503, 503, 503, 503},
/* q14*/    {504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 33,  504, 504, 504, 504, 504, 504, 504, 102, 504},
/* q15*/    {16,  16,  16,  16,  16,  16,  16,  16,  505, 16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16 },
/* q16*/    {507, 507, 507, 507, 507, 507, 507, 507,  35, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507},
/* q17*/    {17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17 },
/* q18*/    {126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 17,  126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
/* q19*/    {19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  127, 19,  19,  19,  19 },
/* q20*/    {105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 41,  105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 42,  105, 105, 105, 105, 105, 105, 105, 105},
/* q21*/    {106, 106, 106, 106, 106, 106, 106, 40,  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 30,  106, 106, 106, 106, 106, 106, 106, 106},
/* q22*/    {107, 107, 107, 107, 107, 107, 107, 107, 107, 29,  107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 43,  107, 107, 107, 107, 107, 107, 107, 107},
/* q23*/    {508, 508, 508, 31,  508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508},
/* q24*/    {108, 108, 108, 108, 108, 108, 108, 108, 108, 26,  108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 44,  108, 108, 108, 108, 108, 108, 108, 108},
/* q25*/    {128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 45,  128, 128, 128, 128, 128, 128, 128, 128},
/* q26*/    {27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27 },
/* q27*/    {27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27 },
/* q28*/    {27,  27,  27,  27,  27,  34,  27,  27,  27,  27,  28,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27 },
/* q29*/    {130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
/* q30*/    {137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
/* q31*/    {132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
/* q32*/    {117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
/* q33*/    {118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
/* q34*/    {136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
/* q35*/    {125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
/* q36*/    {110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
/* q37*/    {112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
/* q38*/    {114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
/* q39*/    {115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
/* q40*/    {130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
/* q41*/    {129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
/* q42*/    {138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138},
/* q43*/    {134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
/* q44*/    {133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
/* q45*/    {135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135}
};

int matrizp [54][71] = {
//                        1000    1001    1002    1003    1004    1005    1006    1007    1008    1009    1010    1011    1012    1013    1014    1015    1016    1017    1018    1019    1020    1021    1022    1023    1024    1025    1026    1027    1028    1029    1030    1031    1032    1033    1034    1035    1036    1037    1038    1039    1040    1041    1042    1043    1044    1045    1046    1047    1048    1049    1050    1051    1052    1053    1054    1055    1056    1057    1058    1059    1061    1062    1063    1064    1065    1066    1067    1068    1069    1070    1071 
/* 0  Program         */ {0,	  1500,	  0,  	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,   1500,   1500,	  1500,	  1500,	  1500,	  500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500,	  1500},
/* 1  Declara_Library */ {1,      1500,   2,      1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 2  Declara_Class   */ {1500,   1500,   3,      1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 3  Declara         */ {1500,   1500,   1500,   1500,   4,      1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   5,      1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   5,      1500,   1500,   5   },
/* 4  Acceso_Var      */ {1500,   1500,   1500,   1500,   1500,   7,      8,      9,      1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   10,     10  },
/* 5  Id_Dim          */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 6  Dim             */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   11,     1500,   1500,   12,     1500,   12,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   12  },
/* 7  A               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   13,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 8  B               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   14,     15,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 9  C               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   16,     1500,   17,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 10 Tipo            */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   18,     19,     20,     21,     22,     23,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 11 Metodos         */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   24,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   24,     1500,   1500,   1500},
/* 12 Declara_Function*/ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   25,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   26,     1500,   1500,   26  },
/* 13 Parametros      */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   28,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   27,     28  },
/* 14 Dec_Localvar    */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   30,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   30,     1500,   30,     29,     1500,   1500,   1500,   30,     1500,   1500,   1500,   1500,   1500,   30,     30,     30,     30,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   30,     1500,   30,     30,     30,     30,     30,     1500,   30,     1500,   30,     1500,   30,     30,     30,     30,     30,     1500,   30,     30,     30  },
/* 15 D               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   32,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   31,     32  },
/* 16 Estatutos       */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   38,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   38,     1500,   42,     1500,   1500,   1500,   1500,   38,     1500,   1500,   1500,   1500,   1500,   38,     38,     38,     38,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   34,     1500,   42,     42,     35,     42,     36,     1500,   37,     42,     42,     1500,   38,     38,     39,     40,     41,     1500,   42,     33,     42  },
/* 17 Est_Asig        */ {},
/* 18 Asig            */ {},
/* 19 Dim_Asig        */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   45,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   46,     46,     46,     46,     46,     46,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   46  },
/* 20 E               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   47,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   47,     1500,   1500,   1500,   1500,   1500,   1500,   47,     1500,   1500,   1500,   1500,   1500,   47,     47,     47,     47,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   47,     1500},
/* 21 F               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   48,     49,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 22 Expr            */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   50,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   50,     1500,   1500,   1500,   1500,   1500,   1500,   50,     1500,   1500,   1500,   1500,   1500,   50,     50,     50,     50,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   50,     1500},
/* 23 Expr’           */ {1500,   51,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   51,     51,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   51,     1500,   1500,   1500,   52,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   51,     51,     1500,   1500,   1500,   51,     51,     1500,   1500,   1500,   1500,   1500,   1500,   51  },
/* 24 Expr2           */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   53,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   53,     1500,   1500,   1500,   1500,   1500,   1500,   53,     1500,   1500,   1500,   1500,   1500,   53,     53,     53,     53,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   53,     1500},
/* 25 Expr2’          */ {1500,   54,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   54,     54,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   54,     1500,   1500,   1500,   54,     55,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   54,     54,     1500,   1500,   1500,   54,     54,     1500,   1500,   1500,   1500,   1500,   1500,   54  },
/* 26 Expr3           */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   56,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   56,     1500,   1500,   1500,   1500,   1500,   1500,   57,     1500,   1500,   1500,   1500,   1500,   56,     56,     56,     56,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   56,     1500},
/* 27 Expr4           */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   58,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   58,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   58,     58,     58,     58,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   58,     1500},
/* 28 Expr4’          */ {1500,   59,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   59,     59,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   59,     1500,   1500,   1500,   59,     59,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   60,     60,     60,     60,     60,     60,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   59,     59,     1500,   1500,   1500,   59,     59,     1500,   1500,   1500,   1500,   1500,   1500,   59  },
/* 29 Expr5           */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   61,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   61,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   61,     61,     61,     61,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   61,     1500},
/* 30 Expr5'          */ {1500,   62,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   62,     62,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   62,     1500,   1500,   1500,   62,     62,     1500,   63,     64,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   62,     62,     62,     62,     62,     62,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   62,     62,     1500,   1500,   1500,   62,     62,     1500,   1500,   1500,   1500,   1500,   1500,   62  },
/* 31 Term            */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   63,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   63,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   63,     63,     63,     63,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   63,     1500},
/* 32 Term’           */ {1500,   66,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   66,     66,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   66,     1500,   1500,   1500,   66,     66,     1500,   66,     66,     67,     68,     69,     1500,   1500,   1500,   1500,   66,     66,     66,     66,     66,     66,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   66,     66,     1500,   1500,   1500,   66,     66,     1500,   1500,   1500,   1500,   1500,   1500,   66  },
/* 33 Fact            */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   71,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   76,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   72,     73,     74,     75,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   70,     1500},
/* 34 Llamada_F       */ {1500,   78,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   78,     78,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   77,     78,     1500,   1500,   1500,   78,     78,     1500,   78,     78,     78,     78,     78,     1500,   1500,   1500,   1500,   78,     78,     78,     78,     78,     78,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   78,     78,     1500,   1500,   1500,   78,     78,     1500,   1500,   1500,   1500,   1500,   1500,   78  },
/* 35 Llamada_F’      */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   79,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   80,     1500},
/* 36 G               */ {},
/* 37 H               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   82,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   83,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 38 Oprel           */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   84,     85,     86,     87,     88,     89,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 39 Opasig          */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   90,     91,     91,     93,     94,     95,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 40 Est_If          */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   96,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 41 I               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   98,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   98,     1500,   1500,   1500,   1500,   1500,   1500,   98,     1500,   1500,   1500,   1500,   1500,   98,     98,     98,     98,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   97,     98,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   98,     98  },
/* 42 J               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   100,    1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   100,    1500,   1500,   1500,   1500,   1500,   1500,   100,    1500,   1500,   1500,   1500,   1500,   100,    100,    100,    100,    1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   100,    1500,   99,     1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   100,    100 },
/* 43 Est_While       */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   101,    1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 44 Est_For         */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   102,    1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 45 Est_Do          */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   103,    1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 46 Est_Unit        */ {},
/* 47 Est_Unit’       */ {},
/* 48 Est_Return      */ {},
/* 49 Est_Read        */ {},
/* 50 Est_Write       */ {},
/* 51 K               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   112,    1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   112,    1500,   1500,   1500,   1500,   1500,   1500,   112,    1500,   1500,   1500,   1500,   1500,   112,    112,    112,    112,    1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   112,    1500},
/* 52 L               */ {1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   113,    1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   113,    1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500,   1500},
/* 53 Declara_Main    */ {}
};

int producciones[116][11]= { 
/* 0   */{2, 1},
/* 1   */{1, 123, 101, 1000},
/* 2   */{-1},
/* 3   */{1003, 11, 3, 123, 101, 1002},
/* 4   */{5, 4, 1004},
/* 5   */{-1},
/* 6   */{1005},
/* 7   */{1006},
/* 8   */{1007},
/* 9   */{-1},
/* 10  */{9, 6, 101},
/* 11  */{7, 121},
/* 12  */{-1},
/* 13  */{8, 102, 132, 102},
/* 14  */{7, 124},
/* 15  */{122},
/* 16  */{9, 5, 124},
/* 17  */{123, 10, 1013},
/* 18  */{1014},
/* 19  */{1015},
/* 20  */{1016},
/* 21  */{1017},
/* 22  */{1018},
/* 23  */{1019},
/* 24  */{55, 12},
/* 25  */{12, 1023, 16, 14, 120, 13, 119, 10, 1013, 101, 1020},
/* 26  */{-1},
/* 27  */{13, 5},
/* 28  */{-1},
/* 29  */{1025, 15, 1024},
/* 30  */{-1},
/* 31  */{15, 5},
/* 32  */{-1},
/* 33  */{16, 123, 17},
/* 34  */{16, 123, 40},
/* 35  */{16, 123, 43},
/* 36  */{16, 123, 44},
/* 37  */{16, 123, 45},
/* 38  */{16, 123, 46},
/* 39  */{16, 123, 48},
/* 40  */{16, 123, 49},
/* 41  */{16, 123, 50},
/* 42  */{-1},
/* 43  */{22, 39, 18},
/* 44  */{19, 101},
/* 45  */{20, 121},
/* 46  */{-1},
/* 47  */{21, 22},
/* 48  */{20, 124},
/* 49  */{122},
/* 50  */{23, 24},
/* 51  */{-1},
/* 52  */{22, 118},
/* 53  */{25, 26},
/* 54  */{-1},
/* 55  */{24, 117},
/* 56  */{27},
/* 57  */{27, 116},
/* 58  */{28, 29},
/* 59  */{-1},
/* 60  */{29, 38},
/* 61  */{30, 31},
/* 62  */{-1},
/* 63  */{30, 105},
/* 64  */{30, 106},
/* 65  */{32, 33},
/* 66  */{-1},
/* 67  */{31, 107},
/* 68  */{31, 108},
/* 69  */{31, 128},
/* 70  */{34, 101},
/* 71  */{102},
/* 72  */{103},
/* 73  */{106},
/* 74  */{125},
/* 75  */{126},
/* 76  */{120, 22, 119},
/* 77  */{35, 119},
/* 78  */{-1},
/* 79  */{120},
/* 80  */{36},
/* 81  */{37, 101},
/* 82  */{36, 124},
/* 83  */{120},
/* 84  */{110},
/* 85  */{115},
/* 86  */{112},
/* 87  */{114},
/* 88  */{113},
/* 89  */{111},
/* 90  */{109},
/* 91  */{138},
/* 92  */{137},
/* 93  */{134},
/* 94  */{133},
/* 95  */{135},
/* 96  */{1051, 44, 43, 16, 120, 22, 119, 1050},
/* 97  */{41, 16, 120, 22, 119, 1052},
/* 98  */{-1},
/* 99  */{16, 1053},
/* 100 */{-1},
/* 101 */{1055, 16, 120, 22, 119, 1054},
/* 102 */{1059, 16, 1058, 22, 1057, 22, 109, 101, 1056},
/* 103 */{1062, 120, 22, 119, 1061, 16, 1058},
/* 104 */{22, 129},
/* 105 */{22, 130},
/* 106 */{47, 22},
/* 107 */{129},
/* 108 */{130},
/* 109 */{22, 1065},
/* 110 */{36, 119, 1066},
/* 111 */{51, 119, 1067},
/* 112 */{52, 22},
/* 113 */{51, 124},
/* 114 */{120},
/* 115 */{1069, 16, 14, 120, 13, 119, 1068}
};

int main() {
    FILE *arch;
    long m;
    char *texto;
    //           ubicación del archivo 
    arch = fopen("/Users/beckyponce/Documents/ejemplo1.spes","r");
    fseek(arch,0,SEEK_END);
    m = ftell(arch);
    rewind(arch);
    texto = (char*)malloc(sizeof(char)*m);
    fread(texto,m+1,1,arch);
    std::cout<<texto<<std::endl;
    std::cout<<"\n-------------------------- Analizador Lexico ---------------------------\n";
    fclose(arch);
    std::string cadena;
    cadena = texto + '\0';
    analizar(cadena);
    std::cout<<"\n------------------------ Analizador Sintactico -------------------------\n";
    analizargram(cadena);
    memset(&pilats[0], 0, sizeof(pilats[0]) * pilats.size());
    memset(&pila[0], 0, sizeof(pila[0]) * pila.size());
    return 0;
}

void analizar(const std::string &cadena) {
    int i = 0, token = 0;
    estado = 0;
    int estadoAnterior = 0;
    auto l = cadena.length();
    pilats.push_back(0);

    while (i < l + 1) {
        int ascii = (int) cadena[i];
        columna = relaciona(ascii);
        estado = matriz[estado][columna];
        //std::cout<<cadena[i]<<" "<<ascii<<" "<<estado<<" "<<columna<<std::endl;
        if(estado <= 99 || estadoAnterior == 0) {
            lexema = lexema + cadena[i];
        }
        if ((estado >= 100) && (estado <= 138)) {
            tlexema = trim_c(lexema);      
            tokens(estado, tlexema);
            token = stpr;
            cadenasin.push_back(tlexema);
            pilats.push_back(token);
            lexema = "";
            estado = 0;
            if(estadoAnterior != 0) {
                i = i-1;
            }
            estadoAnterior = 0;
        } else if ((estado >= 500) && (estado <= 508)) {
            tlexema = trim_c(lexema);
            errores(estado, tlexema);
            token = 1500;
            cadenasin.push_back(tlexema);
            pilats.push_back(token);
            lexema = "";
            estado = 0;
        }
        estadoAnterior = estado;
        i++;
    }
}

void analizargram(const std::string &cadena){
    /*int i = 0, token = 0, rows = 0, sti = 0, cols = 0;
    int l = pilats.size();
    pila.push_back(0);
    while(i<l){
        token = pilats[i];
        if(token==0){
            i++;
            token = pilats[i];
        }else{
            token = pilats[i];
        }
        std::cout<<"___________________________________________________"<<std::endl;
        std::cout<<"Token: "<<token<<std::endl;
        rows = pila.front();
        cols = relacionarsin(token);
        if(pila.front()>=100){
            if((pila.front()==1071)&&(token == pila.front())){
                std::cout<<"Su sintaxis es correcta:)"<<std::endl;
                break;
            }else{
                if(pila.front()==token){
                    pila.pop_back();
                    tipo.pop_back();
                    i++;
                }else{
                    if(token==1500){
                        errores(token,cadena);
                        break;
                    }else{
                        std::cout<<"Ocurrio un error desconocido:("<<std::endl;
                        break;
                    }
                }
            }
        }else{
            if(matriz[pila.front()][token]<200){
                sti = matrizp[pila.front()][cols];
                pila.pop_back();
                llenarPila(sti);
                if(pila.front()==-1){
                    pila.pop_back();
                }
            }else{
                errores(token,cadena);
                break;
            }
        }
    }*/
    int token = 0, sti = 0, cols = 0, rows = 0, i = 0, pi = pila.size();
    bool tv = true, pilafull = true, tf = false;
    std::string tp;
    int l = pilats.size();
    pila.push_back(0);
    while(i<l){
        pila.pop_back();
        token = pilats[i];
        if(token==0){
            i++;
            token = pilats[i];
        }else{
            token = pilats[i];
        }
        std::cout<<"Token: "<<token<<std::endl;
        cols = relacionarsin(token);
        std::cout<<"columna: "<<cols<<std::endl;
        rows = pila.front();
        //std::cout<<"fila: "<<rows<<std::endl;
        sti = matrizp[rows][cols];
        //std::cout<<"estado: "<<sti<<std::endl;
        pila.pop_back();
        llenarPila(sti);
        if(rows <= 100){
            if((pila.front()==1071)&&(token == pila.front())){
                std::cout<<"Su sintaxis es correcta:)"<<std::endl;
                break;
            }else if(pila.front() == token){
                pila.pop_back();
            }else{
                tp = verificar(rows);
            }
        }else{
            if(token == 1500){
                errores(sti, tp);
            }else{
                memset(&pila[0], 0, sizeof(pila[0]) * pila.size());
                pila.push_back(0);
            }
        }
        i++;
        pi--;
    }
    /*for(int y=0;y<=pila.size();y++){
        std::cout<<pila[y]<<std::endl;
    }*/
}

int relaciona(int ascii) {
    if ((verLetMay(ascii))&&(ascii!=69)) {
        st = 0;
    } else if ((verLetMin(ascii))&&(ascii!=101)) {
        st = 1;
    } else if (verNum(ascii)) {
        st = 2;
    } else {
        switch (ascii) {
            //   .
            case 46:
                st = 3;
            break;
            //   ,
            case 44:
                st = 4;
            break;
            //   /
            case 47:
                st = 5;
            break;
            //   _
            case 95:
                st = 6;
            break;
            //   -
            case 45:
                st = 7;
            break;
            //   '
            case 39:
                st = 8;
            break;
            //   *
            case 42:
                st = 9;
            break;
            //   +
            case 43:
                st = 10;
            break;
            //   %
            case 37:
                st = 11;
            break;
            //   >
            case 62:
                st = 12;
            break;
            //   <
            case 60:
                st = 13;
            break;
            //   "
            case 34:
                st = 14;
            break;
            //   E
            case 69:
                st = 15;
            break;
            //   e
            case 101:
                st = 16;
            break;
            //   (
            case 40:
                st = 17;
            break;
            //   )
            case 41:
                st = 18;
            break;
            //   [
            case 91:
                st = 19;
            break;
            //   ]
            case 93:
                st = 20;
            break;
            //   &
            case 38:
                st = 21;
            break;
            //   |
            case 124:
                st = 22;
            break;
            //   =
            case 61:
                st = 23;
            break;
            //   !
            case 33:
                st = 24;
            break;
            //   ;
            case 59:
                st = 25;
            break;
            //   #
            case 35:
                st = 26;
            break;
            //   salto de linea
            case (int)'\n':
                st = 27;
            break;
            case 13:
                st = 27;
            break;
            //   tab
            case (int)'\t':
                st = 28;
            break;
            //   tab
            case (int) '\b':
                st = 29;
            break;
            //   espacio
            case (int) ' ':
                st = 30;
            break;
            // end
            case (int) '\0':
                st = 30;
            break;
            default: st = 31;
        }
    }
    return st;
}

int relacionarsin(int sts){
    switch(sts){
        //   library
        case 1000:
            st2 = 0;
        break;
        //   ;
        case 123:
            st2 = 1;
        break;
        //   class
        case 1002:
            st2 = 2;
        break;
        //   endclass
        case 1003:
            st2 = 3;
        break;
        //   def
        case 1004:
            st2 = 4;
        break;
        //   public
        case 1005:
            st2 = 5;
        break;
        //   private
        case 1006:
            st2 = 6;
        break;
        //   protected
        case 1007:
            st2 = 7;
        break;
        //   [
        case 121:
            st2 = 8;
        break;
        //   cteentera
        case 102:
            st2 = 9;
        break;
        //   ..
        case 132:
            st2 = 10;
        break;
        //   ,
        case 124:
            st2 = 11;
        break;
        //   ]
        case 122:
            st2 = 12;
        break;
        //   as
        case 1013:
            st2 = 13;
        break;
        //   int
        case 1014:
            st2 = 14;
        break;
        //   float
        case 1015:
            st2 = 15;
        break;
        //   char
        case 1016:
            st2 = 16;
        break;
        //   string
        case 1017:
            st2 = 17;
        break;
        //   bool
        case 1018:
            st2 = 18;
        break;
        //   void
        case 1019:
            st2 = 19;
        break;
        //   func
        case 1020:
            st2 = 20;
        break;
        //   (
        case 119:
            st2 = 21;
        break;
        //   )
        case 120:
            st2 = 22;
        break;
        //   endfunc
        case 1023:
            st2 = 23;
        break;
        //   local
        case 1024:
            st2 = 24;
        break;
        //   endlocal
        case 1025:
            st2 = 25;
        break;
        //   ||
        case 118:
            st2 = 26;
        break;
        //   &&
        case 117:
            st2 = 27;
        break;
        //   !
        case 116:
            st2 = 28;
        break;
        //   +
        case 105:
            st2 = 29;
        break;
        //   -
        case 106:
            st2 = 30;
        break;
        //   *
        case 107:
            st2 = 31;
        break;
        //   /
        case 108:
            st2 = 32;
        break;
        //   %
        case 128:
            st2 = 33;
        break;
        //   ctereal
        case 103:
            st2 = 34;
        break;
        //   ctenotacion
        case 104:
            st2 = 35;
        break;
        //   ctecaracter
        case 125:
            st2 = 36;
        break;
        //   ctestring
        case 126:
            st2 = 37;
        break;
        //   ==
        case 110:
            st2 = 38;
        break;
        //   !=
        case 115:
            st2 = 39;
        break;
        //   <=
        case 112:
            st2 = 40;
        break;
        //   >=
        case 114:
            st2 = 41;
        break;
        //   >
        case 113:
            st2 = 42;
        break;
        //   <
        case 111:
            st2 = 43;
        break;
        //   =
        case 109:
            st2 = 44;
        break;
        //   +=
        case 138:
            st2 = 45;
        break;
        //   -=
        case 137:
            st2 = 46;
        break;
        //   *=
        case 134:
            st2 = 47;
        break;
        //   /=
        case 133:
            st2 = 48;
        break;
        //   %=
        case 135:
            st2 = 49;
        break;
        //   if
        case 1050:
            st2 = 50;
        break;
        //   endif
        case 1051:
            st2 = 51;
        break;
        //   elseif
        case 1052:
            st2 = 52;
        break;
        //   else
        case 1053:
            st2 = 53;
        break;
        //   while
        case 1054:
            st2 = 54;
        break;
        //   endwhile
        case 1055:
            st2 = 55;
        break;
        //   for
        case 1056:
            st2 = 56;
        break;
        //   to
        case 1057:
            st2 = 57;
        break;
        //   do
        case 1058:
            st2 = 58;
        break;
        //   endfor
        case 1059:
            st2 = 59;
        break;
        //   eval
        case 1061:
            st2 = 60;
        break;
        //   enddo
        case 1062:
            st2 = 61;
        break;
        //   ++
        case 129:
            st2 = 62;
        break;
        //   --
        case 130:
            st2 = 63;
        break;
        //   return
        case 1065:
            st2 = 64;
        break;
        //   read
        case 1066:
            st2 = 65;
        break;
        //   write
        case 1067:
            st2 = 66;
        break;
        //   main
        case 1068:
            st2 = 67;
        break;
        //   endmain
        case 1069:
            st2 = 68;
        break;
        //   id
        case 101:
            st2 = 69;
        break;
        default:
            st2 = 70;
    }
    return st2;
}

int tokens(int token, std::string lexema) {
    inicio:
    switch (token) {
        case (100):
            if (verRes(lexema)) {
                std::cout << ("Token 100 : " + lexema + " - Es una palabra reservada") << std::endl;
                if(lexema=="library"){
                    stpr = 1000;
                }else if(lexema=="class"){
                    stpr = 1002;
                }else if(lexema=="endclass"){
                    stpr = 1003;
                }else if(lexema=="def"){
                    stpr = 1004;
                }else if(lexema=="public"){
                    stpr = 1005;
                }else if(lexema=="private"){
                    stpr = 1006;
                }else if(lexema=="protected"){
                    stpr = 1007;
                }else if(lexema=="as"){
                    stpr = 1013;
                }else if(lexema=="int"){
                    stpr = 1014;
                }else if(lexema=="float"){
                    stpr = 1015;
                }else if(lexema=="char"){
                    stpr = 1016;
                }else if(lexema=="string"){
                    stpr = 1017;
                }else if(lexema=="bool"){
                    stpr = 1018;
                }else if(lexema=="void"){
                    stpr = 1019;
                }else if(lexema=="func"){
                    stpr = 1020;
                }else if(lexema=="endfunc"){
                    stpr = 1023;
                }else if(lexema=="local"){
                    stpr = 1024;
                }else if(lexema=="endlocal"){
                    stpr = 1025;
                }else if(lexema=="if"){
                    stpr = 1050;
                }else if(lexema=="endif"){
                    stpr = 1051;
                }else if(lexema=="elsif"){
                    stpr = 1052;
                }else if(lexema=="else"){
                    stpr = 1053;
                }else if(lexema=="while"){
                    stpr = 1054;
                }else if(lexema=="endwhile"){
                    stpr = 1055;
                }else if(lexema=="for"){
                    stpr = 1056;
                }else if(lexema=="to"){
                    stpr = 1057;
                }else if(lexema=="do"){
                    stpr = 1058;
                }else if(lexema=="endfor"){
                    stpr = 1059;
                }else if(lexema=="eval"){
                    stpr = 1061;
                }else if(lexema=="enddo"){
                    stpr = 1062;
                }else if(lexema=="return"){
                    stpr = 1065;
                }else if(lexema=="read"){
                    stpr = 1066;
                }else if(lexema=="write"){
                    stpr = 1067;
                }else if(lexema=="main"){
                    stpr = 1068;
                }else if(lexema=="endmain"){
                    stpr = 1069;
                }
            } else {
                token = 101;
                goto inicio;
            }
        break;
        case (101):
            std::cout << ("Token 101 : " + lexema + " - Es un Identificador") << std::endl;
            stpr = 101;
        break;
        case (102):
            std::cout << ("Token 102 : " + lexema + " - Es un Número Entero") << std::endl;
            stpr = 102;
        break;
        case (103):
            std::cout << ("Token 103 : " + lexema + " - Es un Número Real") << std::endl;
            stpr = 103;
        break;
        case (104):
            std::cout << ("Token 104 : " + lexema + " - Es una Notación Científica") << std::endl;
            stpr = 104;
        break;
        case (105):
            std::cout << ("Token 105 : " + lexema + " - Es un Operador Aritmético (suma)") << std::endl;
            stpr = 105;
        break;
        case (106):
            std::cout << ("Token 106 : " + lexema + " - Es un Operador Aritmético (resta)") << std::endl;
            stpr = 106;
        break;
        case (107):
            std::cout << ("Token 107 : " + lexema + " - Es un Operador Aritmético (multiplicación)") << std::endl;
            stpr = 107;
        break;
        case (108):
            std::cout << ("Token 108 : " + lexema + " - Es un Operador Aritmético (división)") << std::endl;
            stpr = 108;
        break;
        case (109):
            std::cout << ("Token 109 : " + lexema + " - Es un Operador de Asignación") << std::endl;
            stpr = 109;
        break;
        case (110):
            std::cout << ("Token 110 : " + lexema + " - Es un Operador Relacional (igual)") << std::endl;
            stpr = 110;
        break;
        case (111):
            std::cout << ("Token 111 : " + lexema + " - Es un Operador Relacional (menor)") << std::endl;
            stpr = 111;
        break;
        case (112):
            std::cout << ("Token 112 : " + lexema + " - Es un Operador Relacionar (menor igual)") << std::endl;
            stpr = 112;
        break;
        case (113):
            std::cout << ("Token 113 : " + lexema + " - Es un Operador Relacional (mayor)") << std::endl;
            stpr = 113;
        break;
        case (114):
            std::cout << ("Token 114 : " + lexema + " - Es un Operador Relacional (mayor igual)") << std::endl;
            stpr = 114;
        break;
        case (115):
            std::cout << ("Token 115 : " + lexema + " - Es un Operador Relacional (diferente)") << std::endl;
            stpr = 115;
        break;
        case (116):
            std::cout << ("Token 116 : " + lexema + " - Es un Operador Lógico (not)") << std::endl;
            stpr = 116;
        break;
        case (117):
            std::cout << ("Token 117 : " + lexema + " - Es un Operador Lógico (and)") << std::endl;
            stpr = 117;
        break;
        case (118):
            std::cout << ("Token 118 : " + lexema + " - Es un Operador Lógico (or)") << std::endl;
            stpr = 118;
        break;
        case (119):
            std::cout << ("Token 119 : " + lexema + " - Es un Signo de Agrupación (paréntesis que abre)") << std::endl;
            stpr = 119;
        break;
        case (120):
            std::cout << ("Token 120 : " + lexema + " - Es un Signo de Agrupación (paréntesis que cierra)")<< std::endl;
            stpr = 120;
        break;
        case (121):
            std::cout << ("Token 121 : " + lexema + " - Es un Signo de Agrupación (corchete que abre)") << std::endl;
            stpr = 121;
        break;
        case (122):
            std::cout << ("Token 122 : " + lexema + " - Es un Signo de Agrupación (corchete que cierra)") << std::endl;
            stpr = 122;
        break;
        case (123):
            std::cout << ("Token 123 : " + lexema + " - Es un Signo de puntuación (punto y coma)") << std::endl;
            stpr = 123;
        break;
        case (124):
            std::cout << ("Token 124 : " + lexema + " - Es un Signo de puntuación (coma)") << std::endl;
            stpr = 124;
        break;
        case (125):
            std::cout << ("Token 125 : " + lexema + " - Es una Constante Carácter") << std::endl;
            stpr = 125;
        break;
        case (126):
            std::cout << ("Token 126 : " + lexema + " - Es una Constante String") << std::endl;
            stpr = 126;
        break;
        case (127):
            std::cout << ("Token 127 : " + lexema + " - Es un Comentario de Linea") << std::endl;
            stpr = 127;
        break;
        case (128):
            std::cout << ("Token 128 : " + lexema + " - Es un Operador Aritmético (módulo)") << std::endl;
            stpr = 128;
        break;
        case (129):
            std::cout << ("Token 129 : " + lexema + " - Es un Operador Aritmético") << std::endl;
            stpr = 129;
        break;
        case (130):
            std::cout << ("Token 130 : " + lexema + " - Es un Operador Aritmético") << std::endl;
            stpr = 130;
        break;
        case (131):
            std::cout << ("Token 131 : " + lexema + " - Es un Operador Aritméticor") << std::endl;
            stpr = 131;
        break;
        case (132):
            std::cout << ("Token 132 : " + lexema + " - Es un Signo de Puntuación") << std::endl;
            stpr = 132;
        break;
        case (133):
            std::cout << ("Token 133 : " + lexema + " - Es un Operador de Asignación") << std::endl;
            stpr = 133;
        break;
        case (134):
            std::cout << ("Token 134 : " + lexema + " - Es un Operador de Asignación") << std::endl;
            stpr = 134;
        break;
        case (135):
            std::cout << ("Token 135 : " + lexema + " - Es un Operador de Asignación") << std::endl;
            stpr = 135;
        break;
        case (136):
            std::cout << ("Token 136 : " + lexema + " - Es un Comentario de Bloque") << std::endl;
            stpr = 136;
        break;
        case (137):
            std::cout << ("Token 137 : " + lexema + " - Es un Operador de Asignación") << std::endl;
            stpr = 137;
        break;
        case (138):
            std::cout << ("Token 138 : " + lexema + " - Es un Operador de Asignación") << std::endl;
            stpr = 138;
        break;
        default: stpr = 1500;
    }
    return stpr;
}

int errores(int error, std::string lexema) {
    switch (error) {
        case (500):
            std::cout << ("Error 500 : " + lexema + "  Número Real incompleto") << std::endl;
        break;
        case (501):
            std::cout << ("Error 501 : " + lexema + "  Notación Científica incompleta") << std::endl;
        break;
        case (502):
            std::cout << ("Error 502 : " + lexema + "  Notación Científica incompleta") << std::endl;
        break;
        case (503):
            std::cout << ("Error 503 : " + lexema + "  Operador Lógico incompleto") << std::endl;
        break;
        case (504):
            std::cout << ("Error 504 : " + lexema + "  Operador Lógico incompleto") << std::endl;
        break;
        case (505):
            std::cout << ("Error 505 : " + lexema + "  Constante Carácter vacía") << std::endl;
        break;
        case (506):
            std::cout << "Error 506 : " << lexema << "  no es valido" << std::endl;
        break;
        case (507):
            std::cout << ("Error 507 : " + lexema + " Constante Carácter solo debe tener un valor entre comillas")<< std::endl;
        break;
        case (508):
            std::cout << ("Error 508 : " + lexema + "  Signo de Puntuación incompleto") << std::endl;
        break;
        case(1500):
            std::cout << ("Error: Revise su Sintaxis") << std::endl;
            stpr = 1500;
        break;
    }
    return stpr;
}

std::string verificar(int sts){
    switch(sts){
        case -1:
            gram = "Vacio";
            //std::cout<<gram<<std::endl;
        break;
        case 0:
            gram = "Programa";
            //std::cout<<gram<<std::endl;
        break;
        case 1:
            gram = "Declara_Library";
            //std::cout<<gram<<std::endl;
        break;
        case 2:
            gram = "Declara_Class";
            //std::cout<<gram<<std::endl;
        break;
        case 3:
            gram = "Declara";
            //std::cout<<gram<<std::endl;
        break;
        case 4:
            gram = "Acceso_Var";
            //std::cout<<gram<<std::endl;
        break;
        case 5:
            gram = "Id_Dim";
            //std::cout<<gram<<std::endl;
        break;
        case 6:
            gram = "Dim";
            //std::cout<<gram<<std::endl;
        break;
        case 7:
            gram = "A";
            //std::cout<<gram<<std::endl;
        break;
        case 8:
            gram = "B";
            //std::cout<<gram<<std::endl;
        break;
        case 9:
            gram = "C";
            //std::cout<<gram<<std::endl;
        break;
        case 10:
            gram = "Tipo";
            //std::cout<<gram<<std::endl;
        break;
        case 11:
            gram = "Metodos";
            //std::cout<<gram<<std::endl;
        break;
        case 12:
            gram = "Declara_Function";
            //std::cout<<gram<<std::endl;
        break;
        case 13:
            gram = "Parametros";
            //std::cout<<gram<<std::endl;
        break;
        case 14:
            gram = "Dec_Localvar";
            //std::cout<<gram<<std::endl;
        break;
        case 15:
            gram = "D";
            //std::cout<<gram<<std::endl;
        break;
        case 16:
            gram = "Estatutos";
            //std::cout<<gram<<std::endl;
        break;
        case 17:
            gram = "Est_Asig";
            //std::cout<<gram<<std::endl;
        break;
        case 18:
            gram = "Asig";
            //std::cout<<gram<<std::endl;
        break;
        case 19:
            gram = "Dim_Asig";
            //std::cout<<gram<<std::endl;
        break;
        case 20:
            gram = "E";
            //std::cout<<gram<<std::endl;
        break;
        case 21:
            gram = "F";
            //std::cout<<gram<<std::endl;
        break;
        case 22:
            gram = "Expr";
            //std::cout<<gram<<std::endl;
        break;
        case 23:
            gram = "Expr’";
            //std::cout<<gram<<std::endl;
        break;
        case 24:
            gram = "Expr2";
            //std::cout<<gram<<std::endl;
        break;
        case 25:
            gram = "Expr2’";
            //std::cout<<gram<<std::endl;
        break;
        case 26:
            gram = "Expr3";
            //std::cout<<gram<<std::endl;
        break;
        case 27:
            gram = "Expr4";
            //std::cout<<gram<<std::endl;
        break;
        case 28:
            gram = "Expr4’";
            //std::cout<<gram<<std::endl;
        break;
        case 29:
            gram = "Expr5";
            //std::cout<<gram<<std::endl;
        break;
        case 30:
            gram = "Expr5'";
            //std::cout<<gram<<std::endl;
        break;
        case 31:
            gram = "Term";
            //std::cout<<gram<<std::endl;
        break;
        case 32:
            gram = "Term'";
            //std::cout<<gram<<std::endl;
        break;
        case 33:
            gram = "Fact";
            //std::cout<<gram<<std::endl;
        break;
        case 34:
            gram = "Llamada_F";
            //std::cout<<gram<<std::endl;
        break;
        case 35:
            gram = "Llamada_F'";
            //std::cout<<gram<<std::endl;
        break;
        case 36:
            gram = "G";
            //std::cout<<gram<<std::endl;
        break;
        case 37:
            gram = "H";
            //std::cout<<gram<<std::endl;
        break;
        case 38:
            gram = "Oprel";
            //std::cout<<gram<<std::endl;
        break;
        case 39:
            gram = "Opasig";
            //std::cout<<gram<<std::endl;
        break;
        case 40:
            gram = "Est_If";
            //std::cout<<gram<<std::endl;
        break;
        case 41:
            gram = "I";
            //std::cout<<gram<<std::endl;
        break;
        case 42:
            gram = "J";
            //std::cout<<gram<<std::endl;
        break;
        case 43:
            gram = "Est_While";
            //std::cout<<gram<<std::endl;
        break;
        case 44:
            gram = "Est_For";
            //std::cout<<gram<<std::endl;
        break;
        case 45:
            gram = "Est_Do";
            //std::cout<<gram<<std::endl;
        break;
        case 46:
            gram = "Est_Unit";
            //std::cout<<gram<<std::endl;
        break;
        case 47:
            gram = "Est_Unit'";
            //std::cout<<gram<<std::endl;
        break;
        case 48:
            gram = "Est_Return";
            //std::cout<<gram<<std::endl;
        break;
        case 49:
            gram = "Est_Read";
            //std::cout<<gram<<std::endl;
        break;
        case 50:
            gram = "Est_Write";
            //std::cout<<gram<<std::endl;
        break;
        case 51:
            gram = "K";
            //std::cout<<gram<<std::endl;
        break;
        case 52:
            gram = "L";
            //std::cout<<gram<<std::endl;
        break;
        case 53:
            gram = "Declara_Main";
            //std::cout<<gram<<std::endl;
        break;
        default:
            gram = "Desconocido";
            //std::cout<<gram<<std::endl;
    }
    return gram;
}

bool verLetMin(int code) {
    if (code >= 97 && code <= 122) {
        return true;
    } else {
        return false;
    }
}

bool verLetMay(int code) {
    if (code >= 65 && code <= 90) {
        return true;
    } else {
        return false;
    }
}

bool verNum(int code) {
    if (code >= 48 && code <= 57) {
        return true;
    }
    return false;
}

bool verRes(std::string lexema) {
    int n = sizeof(PalabrasReservadas) / sizeof(PalabrasReservadas[0]);
    auto isReserved = find(PalabrasReservadas, PalabrasReservadas + n, lexema);
    if (isReserved != end(PalabrasReservadas)) {
        return true;
    }
    return false;
}

static inline void ltrim(std::string &s) {
    s.erase(s.begin(), std::find_if(s.begin(), s.end(),
    std::not1(std::ptr_fun<int, int>(std::isspace))));
}

static inline void rtrim(std::string &s) {
    s.erase(std::find_if(s.rbegin(), s.rend(),
    std::not1(std::ptr_fun<int, int>(std::isspace))).base(), s.end());
}

static inline std::string &trim_c(std::string &s){
    ltrim(s);
    rtrim(s);
    return(s);
}

void llenarPila(int row){
    for(int i = 0; i < 11; i++){
        if(producciones[row][i] != 0){
            pc = producciones[row][i];
            pila.push_back(pc);
            //std::cout<<"Estamos en llenar pila: "<<pc<<std::endl;
        }
    }
}
